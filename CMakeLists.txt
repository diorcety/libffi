CMAKE_MINIMUM_REQUIRED(VERSION 3.7.0)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/cmake" CACHE STRING "Modules for CMake" FORCE)
SET(CMAKE_USER_MAKE_RULES_OVERRIDE "${CMAKE_CURRENT_LIST_DIR}/cmake/asm_override.cmake")

PROJECT(libffi C)
IF(NOT MSVC)
  ENABLE_LANGUAGE(ASM)
ELSE(NOT MSVC)
  ENABLE_LANGUAGE(ASM_MASM)
  IF(NOT CMAKE_CL_64)
    SET(CMAKE_ASM_MASM_FLAGS ${CMAKE_ASM_MASM_FLAGS} -safeseh)
  ENDIF(NOT CMAKE_CL_64)
ENDIF(NOT MSVC)

SET(LIBFFI_VERSION_MAJOR 3)
SET(LIBFFI_VERSION_MINOR 2)
SET(LIBFFI_VERSION_MICRO 1)
SET(LIBFFI_VERSION ${LIBFFI_VERSION_MAJOR}.${LIBFFI_VERSION_MINOR}.${LIBFFI_VERSION_MICRO})
SET(SO_VERSION 6.4.0)
SET(SO_COMPATVERSION 6)

INCLUDE(GNUInstallDirs)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckSymbolExists)
INCLUDE(CheckTypeSize)

# Macros & Functions
MACRO(bool_to_int OUT IN)
  IF(${IN})
    SET(${OUT} 1)
  ELSE()
    SET(${OUT} 0)
  ENDIF()
ENDMACRO()

MACRO(int_try_compile)
  TRY_COMPILE(${ARGN})
  bool_to_int(${ARGV0} ${ARGV0})
ENDMACRO(int_try_compile)

# Check if _GNU_SOURCE is available.
IF(NOT _GNU_SOURCE)
  CHECK_SYMBOL_EXISTS(__GNU_LIBRARY__ "features.h" _GNU_SOURCE)

  IF(NOT _GNU_SOURCE)
    UNSET(_GNU_SOURCE CACHE)
    CHECK_SYMBOL_EXISTS(_GNU_SOURCE "features.h" _GNU_SOURCE)
  ENDIF(NOT _GNU_SOURCE)
ENDIF()

IF(_GNU_SOURCE)
  ADD_DEFINITIONS(-D_GNU_SOURCE)
ENDIF()

# Checks
CHECK_TYPE_SIZE("double" SIZEOF_DOUBLE)
CHECK_TYPE_SIZE("long double" SIZEOF_LONG_DOUBLE)
CHECK_TYPE_SIZE("size_t" SIZEOF_SIZE_T)

CHECK_INCLUDE_FILES("alloca.h" HAVE_ALLOCA_H)
CHECK_INCLUDE_FILES("dlfcn.h" HAVE_DLFCN_H)
CHECK_INCLUDE_FILES("inttypes.h" HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES("memory.h" HAVE_MEMORY_H)
CHECK_INCLUDE_FILES("stdint.h" HAVE_STDINT_H)
CHECK_INCLUDE_FILES("stdlib.h" HAVE_STDLIB_H)
CHECK_INCLUDE_FILES("string.h" HAVE_STRING_H)
CHECK_INCLUDE_FILES("strings.h" HAVE_STRINGS_H)
CHECK_INCLUDE_FILES("sys/mman.h" HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILES("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES("unistd.h" HAVE_UNISTD_H)

CHECK_SYMBOL_EXISTS(alloca "alloca.h" HAVE_ALLOCA)
CHECK_SYMBOL_EXISTS(memcpy "string.h" HAVE_MEMCPY)
CHECK_SYMBOL_EXISTS(mkostemp "stdlib.h" HAVE_MKOSTEMP)
CHECK_SYMBOL_EXISTS(mmap "sys/mman.h" HAVE_MMAP)

# Options
OPTION(ENABLE_DEBUG "debugging mode" OFF)

int_try_compile(HAVE_MMAP_ANON "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/mmap_anon.c")
int_try_compile(HAVE_AS_ASCII_PSEUDO_OP "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/ascii_pseudo_op.c")
int_try_compile(HAVE_AS_CFI_PSEUDO_OP "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/cfi_pseudo_op.c")
int_try_compile(HAVE_AS_STRING_PSEUDO_OP "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/string_pseudo_op.c")

IF(CMAKE_SYSTEM_PROCESSOR MATCHES "(i.86)|(x86)|(X86)|(amd64)|(AMD64)")
  IF(UNIX AND NOT APPLE)
    int_try_compile(HAVE_AS_X86_PCREL "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/pcrel.s")
    int_try_compile(HAVE_AS_X86_64_UNWIND_SECTION_TYPE "${CMAKE_CURRENT_BINARY_DIR}" SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/cmake/x86_unwind.s" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/x86_unwind.c")
  ENDIF(UNIX AND NOT APPLE)
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR (CMAKE_C_COMPILER_ID MATCHES "Clang") OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
  int_try_compile(HAVE_HIDDEN_VISIBILITY_ATTRIBUTE "${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake/attribute_visibility_hidden.c")
  # Hacky
  SET(LIBFFI_CV_RO_EH_FRAME 1)
ENDIF()

IF(LIBFFI_CV_RO_EH_FRAME)
  SET(HAVE_RO_EH_FRAME 1)
  SET(EH_FRAME_FLAGS "\"a\"")
ELSE(LIBFFI_CV_RO_EH_FRAME)
  SET(EH_FRAME_FLAGS "\"aw\"")
ENDIF(LIBFFI_CV_RO_EH_FRAME)

# Hacky
SET(STDC_HEADERS 1)
SET(HAVE_LONG_DOUBLE_VARIANT 0)
SET(FFI_EXEC_TRAMPOLINE_TABLE 0)

# Hard dependencies on options
IF(HAVE_MMAP)
  SET(HAVE_MMAP_DEV_ZERO 1)
  SET(HAVE_MMAP_FILE 1)
ENDIF(HAVE_MMAP)


INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}/include")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

SET(HEADERS
    "include/ffi_common.h"
)

SET(SOURCES
    "src/closures.c"
    "src/java_raw_api.c"
    "src/prep_cif.c"
    "src/raw_api.c"
    "src/types.c"
)

IF(ENABLE_DEBUG)
    SET(SOURCES "${SOURCES}" "src/debug.c")
ENDIF(ENABLE_DEBUG)

IF(CMAKE_SYSTEM_PROCESSOR MATCHES "(i.86)|(x86)|(X86)|(amd64)|(AMD64)")
  SET(SOURCE_PREFIX "src/x86")
  INCLUDE_DIRECTORIES(${SOURCE_PREFIX})
  IF("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
    IF(WIN32)
      SET(TARGET X86_WIN32)
      SET(SOURCES "${SOURCES}" "${SOURCE_PREFIX}/ffi.c")
      SET(SOURCES "${SOURCES}" "${SOURCE_PREFIX}/win32.S")
    ENDIF(WIN32)
    IF(UNIX AND NOT APPLE)
      SET(TARGET X86)
      SET(SOURCES "${SOURCES}" "${SOURCE_PREFIX}/ffi.c")
      SET(SOURCES "${SOURCES}"
          "${SOURCE_PREFIX}/win32.S"
          "${SOURCE_PREFIX}/sysv.S"
      )
    ENDIF(UNIX AND NOT APPLE)
  ELSE("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
    IF(WIN32)
      SET(TARGET X86_WIN64)
      SET(SOURCES "${SOURCES}" "${SOURCE_PREFIX}/ffi.c")
      SET(SOURCES "${SOURCES}" "${SOURCE_PREFIX}/win64.S")
    ENDIF(WIN32)
    IF(UNIX AND NOT APPLE)
      SET(TARGET X86_64)
      SET(SOURCES "${SOURCES}"
          "${SOURCE_PREFIX}/ffi64.c"
          "${SOURCE_PREFIX}/ffi.c"
      )
      SET(SOURCES "${SOURCES}"
          "${SOURCE_PREFIX}/unix64.S"
          "${SOURCE_PREFIX}/sysv.S"
      )
    ENDIF(UNIX AND NOT APPLE)
  ENDIF("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
ENDIF(CMAKE_SYSTEM_PROCESSOR MATCHES "(i.86)|(x86)|(X86)|(amd64)|(AMD64)")

MESSAGE(STATUS "Build configured for ${TARGET} architecture")

# Macros & Functions
MACRO(bool_to_int OUT IN)
  IF(${IN})
    SET(${OUT} 1)
  ELSE()
    SET(${OUT} 0)
  ENDIF()
ENDMACRO()

FUNCTION(generate_config)
  SET(LT_OBJDIR "\".libs/\"")
  SET(PACKAGE "\"${PROJECT_NAME}\"")
  SET(PACKAGE_BUGREPORT "\"http://github.com/atgreen/libffi/issues\"")
  SET(PACKAGE_NAME "\"${PROJECT_NAME}\"")
  SET(PACKAGE_STRING "\"${PROJECT_NAME} ${LIBFFI_VERSION}\"")
  SET(PACKAGE_TARNAME "\"${PROJECT_NAME}\"")
  SET(PACKAGE_URL "\"\"")
  SET(PACKAGE_VERSION "\"${LIBFFI_VERSION}\"")
  SET(VERSION "\"${LIBFFI_VERSION}\"")
  bool_to_int(FFI_DEBUG ENABLE_DEBUG)
  IF(SIZEOF_LONG_DOUBLE)
    SET(HAVE_LONG_DOUBLE 1)
  ENDIF()
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/include/ffi.h.in" "${CMAKE_CURRENT_BINARY_DIR}/include/ffi.h")
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/cmake/fficonfig.h.in" "${CMAKE_CURRENT_BINARY_DIR}/fficonfig.h")
ENDFUNCTION(generate_config)

FUNCTION(generate_pkgconfig)
  SET(PACKAGE_NAME "${PROJECT_NAME}")
  SET(PACKAGE_VERSION "${LIBFFI_VERSION}")
  SET(prefix "${CMAKE_INSTALL_PREFIX}")
  SET(exec_prefix "\${prefix}")
  SET(libdir "\${exec_prefix}/lib")
  SET(toolexeclibdir "\${exec_prefix}/lib/../lib")
  SET(includedir "\${prefix}/include")

  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libffi.pc.in" "${CMAKE_CURRENT_BINARY_DIR}/libffi.pc" @ONLY)
ENDFUNCTION()

FUNCTION(generate_cmake_config)
  CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/libffi-config.cmake.in" "${CMAKE_CURRENT_BINARY_DIR}/libffi-config.cmake" @ONLY)
ENDFUNCTION(generate_cmake_config)

generate_config()
generate_pkgconfig()
generate_cmake_config()

ADD_DEFINITIONS(-DFFI_BUILDING)
ADD_LIBRARY(ffi ${SOURCES} ${HEADERS})
SET_TARGET_PROPERTIES(ffi PROPERTIES SOVERSION ${SO_COMPATVERSION})
SET_TARGET_PROPERTIES(ffi PROPERTIES VERSION ${SO_VERSION})

SET(LIBFFI_INCLUDIR "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}-${LIBFFI_VERSION}/include")
INSTALL(FILES "${HEADERS}" DESTINATION "${LIBFFI_INCLUDIR}")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/include/ffi.h" DESTINATION "${LIBFFI_INCLUDIR}")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/fficonfig.h" DESTINATION "${LIBFFI_INCLUDIR}")
INSTALL(FILES "${SOURCE_PREFIX}/ffitarget.h" DESTINATION "${LIBFFI_INCLUDIR}")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libffi.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/libffi-config.cmake" DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/libffi")

INSTALL(TARGETS ffi
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
)
